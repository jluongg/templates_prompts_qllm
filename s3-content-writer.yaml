name: story_visualization_workflow
description: Generate a story and create scene visualizations
defaultProvider: openai
steps:
  - tool: s3
    input:
      operation: load
      bucket: "{{bucket_name}}"
      key: "{{JSON.parse(load_key_json)}}"  # Parse back into array
    output: template_content

  - templateUrl: https://github.com/novagen-conseil/qlstorage-test/blob/main/templates/fb156521-9b94-4937-acd0-8ce9cd6866c3/eabc7a8e-5415-4629-9542-2693b9e5beba/ai-story-generator.yaml
    provider: openai
    input:
      genre: "$template_content"
      theme: "{{theme}}"
      word_count: "{{word_count}}"
      target_audience: "{{target_audience}}"
    output:
      story: generated_story
      story_elements: story_elements

  - templateUrl: https://github.com/novagen-conseil/qlstorage-test/blob/main/templates/fb156521-9b94-4937-acd0-8ce9cd6866c3/eabc7a8e-5415-4629-9542-2693b9e5beba/scene-visualization-generator.yaml
    provider: openai
    input:
      scene_text: "$generated_story"
      visual_style: "{{visual_style}}"
      atmospheric_mood: "{{atmospheric_mood}}"
    output:
      visualization: scene_visualization
      cinematic_elements: cinematic_notes

  - tool: fileSaver
    input:
      path: "{{local_save_path}}" # Use the path from TypeScript
      content: "$scene_visualization"
      encoding: utf-8
    output: save_result

  - tool: s3
    input:
      operation: save
      bucket: "{{bucket_name}}"
      key: key: "{{JSON.parse(save_key_json)}}"
      filePath: ["{{local_save_path}}"] # Use the same local path
    output: s3_save_result




  - name: save_story
    tool: s3
    input:
      operation: save
      bucket: "{{bucket_name}}"
      key: "{{JSON.parse(save_key_json)}}"  # Parse back into array
      content: "{{$story_text}}"
      filePath: "{{local_save_path}}"